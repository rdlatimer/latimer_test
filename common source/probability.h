#define  A1  (-3.969683028665376e+01)#define  A2   2.209460984245205e+02#define  A3  (-2.759285104469687e+02)#define  A4   1.383577518672690e+02#define  A5  (-3.066479806614716e+01)#define  A6   2.506628277459239e+00#define  B1  (-5.447609879822406e+01)#define  B2   1.615858368580409e+02#define  B3  (-1.556989798598866e+02)#define  B4   6.680131188771972e+01#define  B5  (-1.328068155288572e+01)#define  C1  (-7.784894002430293e-03)#define  C2  (-3.223964580411365e-01)#define  C3  (-2.400758277161838e+00)#define  C4  (-2.549732539343734e+00)#define  C5   4.374664141464968e+00#define  C6   2.938163982698783e+00#define  D1   7.784695709041462e-03#define  D2   3.224671290700398e-01#define  D3   2.445134137142996e+00#define  D4   3.754408661907416e+00#define P_LOW   0.02425/* P_high = 1 - p_low*/#define P_HIGH  0.97575#ifdef probability	#include <stdlib.h>	#include <stdio.h>	#include <time.h>	#include <math.h>	#include <string.h>	int *PoissonRand(double rate, double time, double precision);	int PoissonRandOutcome(double rate, double time, double prob, int MAX);	double Poisson(double r, double t, double n);	double lnPoisson(double r, double t, double n);	double lnPoisson_vector(double *exp, double *n, int mxf);	double lnPoisson_vector_part(double *exp, double *n, int mxf, int start);	double binomexact(int n, int t, double x);	double *binomialvector(int n, double x);	double lnmultinomsuff(double *obs, double *exp, int n);	double chidist(double ssq, int df);	double gamma(double a);	double gammad(double a);	double gammaprob(double x, double a, double b);	double gammadist(double r, double a, double b);	double *gammapartitions(double a, double b, int pts);	double *gammapartitionsrev(double a, double b, int pts);	double *gammapartitionmids(double a, double b, int pts);	double gammln(double xx);	double *pdfmaker (double *density, int start, int end);	int fact(int a);	int paths_back(int steps, int states);/*	long combin(int N, int n);					already in moremath.c	*/	double mean(double *data, int N);	double variance(double *data, int N);	double stand_dev(double *data, int N);	double dsumsqdiffs (double *v1, double *v2, int n);	double normheight (double x, double ave, double sd);	double nerf(double x);	double normareabetween(double x, double y, double ave, double sd);	double *normpartitions(int pts);	double *normpartitionmids(int pts);	double *lgnormpartitionmids(double mag, int pts);	double randomnormal(double precision);	double randomnormaloutcome(double prob, double precision);	double randomnormalZ (double ave, double sd);	double taylornerf(double z);//	double randn_notrig(double mu=0.0, double sigma=1.0)	double normalcurvearea (double precision);	long double normsinv(long double p);	double *normhistogram(int bars);	double exponentialrandom(double lambda);#else	extern int *PoissonRand(double rate, double time, double precision);	extern int PoissonRandOutcome(double rate, double time, double prob, int MAX);	extern double Poisson(double r, double t, double n);	extern double lnPoisson(double r, double t, double n);	extern double lnPoisson_vector_part(double *exp, double *n, int mxf, int start);	extern double lnPoisson_vector(double *exp, double *n, int mxf);	extern double binomexact(int n, int t, double x);	extern double *binomialvector(int n, double x);	extern double lnmultinomsuff(double *obs, double *exp, int n);	extern double chidist(double ssq, int df);	extern double gamma(double a);	extern double gammad(double a);	extern double gammaprob(double x, double a, double b);	extern double gammadist(double r, double a, double b);	extern double gammln(double xx);	extern double *gammapartitions(double a, double b, int pts);	extern double *gammapartitionsrev(double a, double b, int pts);	extern double *gammapartitionmids(double a, double b, int pts);	extern double *pdfmaker (double *density, int start, int end);	extern int fact(int a);	extern int paths_back(int steps, int states);/*	extern long combin(int N, int n);	*/	extern double mean(double *data, int N);	extern double variance(double *data, int N);	extern double stand_dev(double *data, int N);	extern double dsumsqdiffs (double *v1, double *v2, int n);	extern double normheight (double x, double ave, double sd);	extern double nerf(double x);	extern double normareabetween(double x, double y, double ave, double sd);	extern double gammln(double xx);	extern double *normpartitions(int pts);	extern double *normpartitionmids(int pts);	extern double *lgnormpartitionmids(double mag, int pts);	extern double randomnormal(double precision);	extern double randomnormaloutcome(double prob, double precision);	extern double randomnormalZ (double ave, double sd);	extern double taylornerf(double z);	extern double normalcurvearea (double precision);//	extern double randn_notrig(double mu=0.0, double sigma=1.0);	extern long double normsinv(long double p);	extern double *normhistogram(int bars); 	extern double exponentialrandom(double lambda);#endif