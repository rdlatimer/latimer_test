#define memory#include "memory.h"#include <stdlib.h>#include <stdio.h>#include <time.h>#include <math.h>#include <string.h>bool **bmatrix(int nrows, int ncolumns){int i,j;bool **m;/* allocate pointers to rows *///bool **m = new bool * [nrows];m = (bool **)malloc(nrows * sizeof (bool*));//if (!m) cout << "allocation error in bmatrix - primary";if (!m) printf("allocation error in imatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {//	m[i] = new bool [ncolumns];	m[i] = (bool *) malloc (ncolumns * sizeof (bool));//	if (!m[i]) cout << "allocation error in bmatrix - row " << i;	if (!m[i]) {		printf("allocation error in imatrix - row %d", i);		exit(0);		}	}/* initialize to 0 */for (i=0 ; i<nrows ; i++) {	for (j=0 ; j<ncolumns ; j++) {		m[i][j]=false;		}	}/* return pointer to array of pointers to rows */return m;		}bool ***bcube(int length, int width, int height){int i, j, k;/*bool ***b_cube = new bool ** [length];	*/bool ***b_cube;b_cube = (bool***)malloc(length * sizeof (bool**));if (!b_cube) printf("allocation error in fcube - prmary");/*if (!b_cube) cout << "allocation error in b_cube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	b_cube[i] = new bool * [width];	if (!b_cube[i]) cout << "allocation error in b_cube - width " << i;	*/	b_cube[i] = (bool **) malloc (width * sizeof (bool*));	if (!b_cube[i]) printf("allocation error in fcube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		b_cube[i][j]=new bool [height];		if (!b_cube[i][j]) cout << "allocation error in b_cube - height " << i << " x  " << j;	*/		b_cube[i][j] = (bool *) malloc (height * sizeof (bool));		if (!b_cube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) b_cube[i][j][k]=0.0f;		}	}return b_cube;}void free_bmatrix(bool **b_matrix, int nrows){int i;for (i=0 ; i<nrows ; i++) 	{	delete [] b_matrix[i];	b_matrix[i]=0;	}delete [] b_matrix;b_matrix=0;return;}void free_bcube(bool ***b_cube, int length, int width){int i, j;for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) 		{		delete [] b_cube[i][j];		b_cube[i][j]=0;		}	}for (i=0 ; i<length ; i++) 	{	delete [] b_cube[i];	b_cube[i]=0;	}delete [] b_cube;b_cube=0;return;}/* Integer allocations *//* written by M. Kosnik 2000.02.10  *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */int *ivector(int length){int i;    int *v = (int*)malloc(length * sizeof (int));if (!v) {	printf("allocation error in ivector");	}/* initialize to 0 */for (i=0 ; i<length ; i++) {	v[i]=0;	}/* return pointer to array */return v;		}void free_ivector(int *v){	free((void *) v);	return;		}/* matrix *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */int **imatrix(int nrows, int ncolumns){int i, j;int **m;/* allocate pointers to rows */m = (int **)malloc(nrows * sizeof (int*));/* m = new int*[nrows]						*/if (!m) printf("allocation error in imatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (int *) malloc (ncolumns * sizeof (int));	/* m[i] = new int[ncolumns];				*/	if (!m[i]) {		printf("allocation error in imatrix - row %d", i);		exit(0);		}	}for (i=0; i<nrows; ++i)	for (j=0; j<ncolumns; ++j)		m[i][j]=0;/* return pointer to array of pointers to rows */return m;		}void free_imatrix(int **m, int nrows, int ncolumns){int i;for (i=0 ; i<nrows ; i++)	free((void *) m[i]);free((void *) m);return;}/* double allocations  *//* written by M. Kosnik 2000.02.10  *//* modfied by P. Wagner 2002.01.24  *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector  *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */double *dvector(int length){int i;double *v = (double*)malloc(length * sizeof (double));if (!v) {	printf("allocation error in dvector");	}/* initialize to 0 */for (i=0 ; i<length ; i++) {	v[i]=0.0f;}/* return pointer to array */return v;		}void free_dvector(double *v){free((void *) v);return;		}/* matrix  *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */double **dmatrix(int nrows, int ncolumns){int i, j;double **m;/* allocate pointers to rows */m = (double **)malloc(nrows * sizeof (double*));if (!m) printf("allocation error in dmatrix - primary");		/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (double *) malloc (ncolumns * sizeof (double));	if (!m[i]) {		printf("allocation error in dmatrix - row %d", i);		exit(0);		}	}	/* set all cells to 0.0 */for (i=0; i<nrows; ++i)	for (j=0; j<ncolumns; ++j)		m[i][j]=0.f;/* return pointer to array of pointers to rows */return m;		}void free_dmatrix(double **m, int nrows, int ncolumns){int i;for (i=0 ; i<nrows ; i++)	free((void *) m[i]);free((void *) m);return;}/* Long allocations  *//* Modified from M. Kosnik 2001.01.14 *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector  *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */long *lvector(long length){long i;long *v = (long*)malloc(length * sizeof (long));if (!v) printf("allocation error in lvector");/* initialize to 0 */for (i=0 ; i<length ; i++) {	v[i]=0;	}/* return pointer to array */return v;}void free_lvector(long *v){free((void *) v);return;		}/* matrix *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */long **lmatrix(int nrows, int ncolumns){int i,j;long **m;/* allocate pointers to rows */m = (long **)malloc(nrows * sizeof (long*));if (!m) printf("allocation error in lmatrix - primary");		/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (long *) malloc (ncolumns * sizeof (long));	if (!m[i]) {		printf("allocation error in lmatrix - row %d", i);		exit(0);		}	}for (i=0; i<nrows; ++i)	for (j=0; j<ncolumns; ++j)	m[i][j]=0;	/* return pointer to array of pointers to rows */return m;		}void free_lmatrix(long **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}/* Unsigned long allocations *//* written by M. Kosnik 2000.02.10 *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */unsigned long *ulvector(long length){	long i;		unsigned long *v = (unsigned long*)malloc(length * sizeof (unsigned long));	if (!v) printf("allocation error in ulvector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=0;	}		/* return pointer to array */	return v;}void free_ulvector(unsigned long *v){	free((void *) v);	return;		}/* matrix *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */unsigned long **ulmatrix(int nrows, int ncolumns){int i,j;unsigned long **m;/* allocate pointers to rows */m = (unsigned long **)malloc(nrows * sizeof (unsigned long*));if (!m) printf("allocation error in ulmatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (unsigned long *) malloc (ncolumns * sizeof (unsigned long));	if (!m[i]) {		printf("allocation error in ulmatrix - row %d", i);		exit(0);		}	}	/* return pointer to array of pointers to rows */	for (i=0; i<nrows; ++i)	for (j=0; j<ncolumns; ++j)	m[i][j]=0;	return m;		}void free_ulmatrix(unsigned long **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}/* float allocations *//* written by M. Kosnik 2000.02.10 *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//* vector *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */float *fvector(int length){	int i;                float *v = (float*)malloc(length * sizeof (float));	if (!v) printf("allocation error in fvector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=0.f;	}		/* return pointer to array */	return v;		}void free_fvector(float *v){	free((void *) v);	return;		}/* matrix *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */float **fmatrix(int nrows, int ncolumns){int i,j;float **m;/* allocate pointers to rows */m = (float**)malloc(nrows * sizeof (float*));if (!m) printf("allocation error in fmatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (float *) malloc (ncolumns * sizeof (float));	if (!m[i]) printf("allocation error in fmatrix - row %d", i);	}/* initialize to 0 */for (i=0 ; i<nrows ; i++) {	for (j=0 ; j<ncolumns ; j++) {		m[i][j]=0.f;	}}/* return pointer to array of pointers to rows */return m;		}void free_fmatrix(float **m, int nrows, int ncolumns){	int i;		for (i=0 ; i<nrows ; i++)		free((void *) m[i]);	free((void *) m);		return;}char *cvector(int length){	int i;            char *v = (char *)malloc(length*sizeof(char));	if (!v) printf("allocation error in cvector");		/* initialize to 0 */	for (i=0 ; i<length ; i++) {		v[i]=' ';	}		/* return pointer to array */	return v;		}void free_cvector(char *v){	free((void *) v);	return;		}/* matrix *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */char **cmatrix(int nrows, int ncolumns){int i,j;char **m;/* allocate pointers to rows */m = (char**)malloc(nrows * sizeof (char*));if (!m) printf("allocation error in cmatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = (char *) malloc (ncolumns * sizeof (char));	if (!m[i]) printf("allocation error in cmatrix - row %d", i);	}/* initialize to 0 */for (i=0 ; i<nrows ; i++) {	for (j=0 ; j<ncolumns ; j++) {		m[i][j]=' ';		}	}/* return pointer to array of pointers to rows */return m;		}void free_cmatrix(char **m, int nrows, int ncolumns){int i;for (i=0 ; i<nrows ; i++)	free((void *) m[i]);free((void *) m);return;}/* unsigned long longs */unsigned long long **ullmatrix(int nrows, int ncolumns){int i,j;/* allocate pointers to rows */unsigned long long **m = new unsigned long long * [nrows];//if (!m) cout << "allocation error in ulongmatrix - primary";if (!m) printf("allocation error in ulongmatrix - primary");/* allocate rows and set pointers to them */for (i=0 ; i<nrows ; i++) {	m[i] = new unsigned long long [ncolumns];//	if (!m[i]) cout << "allocation error in ulongmatrix - row " << i;	if (!m[i]) printf("allocation error in cmatrix - row %d", i);	}/* initialize to 0 */for (i=0 ; i<nrows ; i++) {	for (j=0 ; j<ncolumns ; j++) {		m[i][j]=0;		}	}/* return pointer to array of pointers to rows */return m;		}void free_ullmatrix(unsigned long long **m, int nrows){int i;for (i=0 ; i<nrows ; i++) delete [] m[i];delete [] m;m=0;return;}/* vector  *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */int *ibigvector(int length){int i;    int *v = (int*)malloc(length * sizeof (unsigned long));if (!v) printf("allocation error in ibigvector");/* initialize to 0 */for (i=0 ; i<length ; i++) {	v[i]=0;	}/* return pointer to array */return v;		}/* vector *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */double *dbigvector(int length){int i;double *v = (double*)malloc(length * sizeof (unsigned long));if (!v) printf("allocation error in dbigvector");/* initialize to 0 */for (i=0 ; i<length ; i++) {	v[i]=0.0f;	}/* return pointer to array */return v;		}/* fcube: creates a 3D matrix of float *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */float ***fcube(int length, int width, int height){int i, j, k;/*float ***f_cube = new float ** [length];	*/float ***f_cube;f_cube = (float***)malloc(length * sizeof (float**));if (!f_cube) printf("allocation error in fcube - prmary");/*if (!f_cube) cout << "allocation error in f_cube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	f_cube[i] = new float * [width];	if (!f_cube[i]) cout << "allocation error in f_cube - width " << i;	*/	f_cube[i] = (float **) malloc (width * sizeof (float*));	if (!f_cube[i]) printf("allocation error in fcube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		f_cube[i][j]=new float [height];		if (!f_cube[i][j]) cout << "allocation error in f_cube - height " << i << " x  " << j;	*/		f_cube[i][j] = (float *) malloc (height * sizeof (float));		if (!f_cube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) f_cube[i][j][k]=0.0f;		}	}return f_cube;}/* dcube: creates a 3D matrix of double *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */double ***dcube(int length, int width, int height){int i, j, k;/*double ***d_cube = new double ** [length];	*/double ***d_cube;d_cube = (double***)malloc(length * sizeof (double**));if (!d_cube) printf("allocation error in fcube - prmary");/*if (!d_cube) cout << "allocation error in d_cube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	d_cube[i] = new double * [width];	if (!d_cube[i]) cout << "allocation error in d_cube - width " << i;	*/	d_cube[i] = (double **) malloc (width * sizeof (double*));	if (!d_cube[i]) printf("allocation error in fcube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		d_cube[i][j]=new double [height];		if (!d_cube[i][j]) cout << "allocation error in d_cube - height " << i << " x  " << j;	*/		d_cube[i][j] = (double *) malloc (height * sizeof (double));		if (!d_cube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) d_cube[i][j][k]=0.0f;		}	}return d_cube;}/* dcube: creates a 4D matrix of double *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */double ****dhypcube(int length, int width, int height, int day){int i, j, k, l;/*double ***d_cube = new double ** [length];	*/double ****d_hcube;d_hcube = (double****)malloc(length * sizeof (double***));if (!d_hcube) printf("allocation error in fcube - prmary");/*if (!d_hcube) cout << "allocation error in d_hcube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	d_hcube[i] = new double * [width];	if (!d_hcube[i]) cout << "allocation error in d_hcube - width " << i;	*/	d_hcube[i] = (double ***) malloc (width * sizeof (double**));	if (!d_hcube[i]) printf("allocation error in fcube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		d_hcube[i][j]=new double [height];		if (!d_hcube[i][j]) cout << "allocation error in d_hcube - height " << i << " x  " << j;	*/		d_hcube[i][j] = (double **) malloc (height * sizeof (double*));		if (!d_hcube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		d_hcube[i][j]=new double [height];		if (!d_hcube[i][j]) cout << "allocation error in d_hcube - height " << i << " x  " << j;	*/		for (k=0; k<height; ++k)	{			d_hcube[i][j][k] = (double *) malloc (day * sizeof (double));			if (!d_hcube[i][j][k]) printf("allocation error in fcube - week %d", k);			}		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) {			for (l=0; l<day; l++)	d_hcube[i][j][k][l]=0.0f;			}		}	}return d_hcube;}/* icube: creates a 3D matrix of integers *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */int ***icube(int length, int width, int height){int i, j, k;/*int ***i_cube = new int ** [length];	*/int ***i_cube;i_cube = (int***)malloc(length * sizeof (int**));if (!i_cube) printf("allocation error in fcube - prmary");/*if (!i_cube) cout << "allocation error in i_cube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	i_cube[i] = new int * [width];	if (!i_cube[i]) cout << "allocation error in i_cube - width " << i;	*/	i_cube[i] = (int **) malloc (width * sizeof (int*));	if (!i_cube[i]) printf("allocation error in fcube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		i_cube[i][j]=new int [height];		if (!i_cube[i][j]) cout << "allocation error in i_cube - height " << i << " x  " << j;	*/		i_cube[i][j] = (int *) malloc (height * sizeof (int));		if (!i_cube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) i_cube[i][j][k]=0.0f;		}	}return i_cube;}/* lcube: creates a 3D matrix of long *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */long ***lcube(int length, int width, int height){int i, j, k;/*long ***l_cube = new long ** [length];	*/long ***l_cube;l_cube = (long***)malloc(length * sizeof (long**));if (!l_cube) printf("allocation error in fcube - prmary");/*if (!l_cube) cout << "allocation error in l_cube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	l_cube[i] = new long * [width];	if (!l_cube[i]) cout << "allocation error in l_cube - width " << i;	*/	l_cube[i] = (long **) malloc (width * sizeof (long*));	if (!l_cube[i]) printf("allocation error in fcube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		l_cube[i][j]=new long [height];		if (!l_cube[i][j]) cout << "allocation error in l_cube - height " << i << " x  " << j;	*/		l_cube[i][j] = (long *) malloc (height * sizeof (long));		if (!l_cube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) l_cube[i][j][k]=0.0f;		}	}return l_cube;}/* ulcube: creates a 3D matrix of unsigned long *//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */unsigned long ***ulcube(int length, int width, int height){int i, j, k;/*unsigned long ***ul_cube = new unsigned long ** [length];	*/unsigned long ***ul_cube;ul_cube = (unsigned long***)malloc(length * sizeof (unsigned long**));if (!ul_cube) printf("allocation error in fcube - prmary");/*if (!ul_cube) cout << "allocation error in ul_cube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	ul_cube[i] = new unsigned long * [width];	if (!ul_cube[i]) cout << "allocation error in ul_cube - width " << i;	*/	ul_cube[i] = (unsigned long **) malloc (width * sizeof (unsigned long*));	if (!ul_cube[i]) printf("allocation error in fcube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		ul_cube[i][j]=new unsigned long [height];		if (!ul_cube[i][j]) cout << "allocation error in ul_cube - height " << i << " x  " << j;	*/		ul_cube[i][j] = (unsigned long *) malloc (height * sizeof (unsigned long));		if (!ul_cube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) ul_cube[i][j][k]=0.0f;		}	}return ul_cube;}char ***chcube(int length, int width, int height){int i, j, k;/*unsigned long ***ul_cube = new unsigned long ** [length];	*/char ***ch_cube;ch_cube = (char ***)malloc(length * sizeof (char**));if (!ch_cube) printf("allocation error in ccube - prmary");/*if (!ch_cube) cout << "allocation error in ch_cube - length";	*//* allocate rows and set pointers to them */for (i=0 ; i<length ; i++) {/*	ch_cube[i] = new unsigned long * [width];	if (!ch_cube[i]) cout << "allocation error in ch_cube - width " << i;	*/	ch_cube[i] = (char **) malloc (width * sizeof (char*));	if (!ch_cube[i]) printf("allocation error in ccube - row %d", i);	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {/*		ch_cube[i][j]=new unsigned long [height];		if (!ch_cube[i][j]) cout << "allocation error in ch_cube - height " << i << " x  " << j;	*/		ch_cube[i][j] = (char *) malloc (height * sizeof (char));		if (!ch_cube[i][j]) printf("allocation error in fcube - column %d", j);		}	}for (i=0 ; i<length ; i++) {	for (j=0 ; j<width ; j++) {		for (k=0; k<height ; k++) ch_cube[i][j][k]=0.0f;		}	}return ch_cube;}