#ifdef Tree_Likelihood#define BUD		0#define BIF		1#define TREE_END	-1#include <stdlib.h>#include <stdio.h>#include <time.h>#include <math.h>#include <string.h>double ***initialize_conditional_likelihoods(long **chmatrix, int *nstates, int notu, int ttlbr, int nchars, int maxst, int UNKNOWN, int INAP);void MkSimplest(int st, int states, double rate, double time, double *marginals, int UNKNOWN, int INAP);void MkSimple(double **statelikes, int otu, int anc, int charst, double rate, double time);void MkSimpleGeog(double **geoglikes, double *pg, int otu, int anc, int charst, double rate, double origin, double FA);void MkModel(double *stls, int states, double rate, double time, double *marginals, int missing, int notap);void MkGeogNode(double **lgsp, int *node, double *fa, int htu, int f1, double geog, double im, double t);void MkBranch(int sp, int anc, double ***statelikes, double ***nodelnmarg, long **statechars, long *charswstates, int maxst, double rate, double time, int UNKNOWN, int INAP);void MkCharacters(int sp, int ancl, int htu, double ***statelikes, double ***nodelnmarg, long **statechars, long *charwstates, int maxst, double alpha, double time, int UNKNOWN, int INAP);void MkCharactersVar(int sp, int ancl, int htu, double ***statelikes, double ***nodelnmarg, double ***branchlnlikes, long **statechars, long *charwstates, int maxst, double *alphas, int rates, double time, int UNKNOWN, int INAP);void MkCharactersVarBranch(int sp, int ancl, double ***statelikes, double ***branchlikes, long **statechars, long *charswstates, int maxst, double *alphas, int rates, double time, int UNKNOWN, int INAP);void MkSimpleWholeTree(long *ape, int notu, int nodes, double **divergences, long **statechars, long *charswstates, int maxst, double *alphas, double *betas, int rates, double ***statelikes, double lambda, unsigned long *ancestral, unsigned long *minbr);void MkSimplePulley(int HTU, long *ape, int notu, int nodes, double **divergences, long **statechars, long *charswstates, int maxst, double *alphas, double *betas, int rates, double ***statelikes, double lambda, unsigned long *ancestral, unsigned long *minbr);double get_tree_likelihood(double **statelikes, int *novels, int *nstates, int nchars);void stasis_likelihood_simple(int notu, long **chmatrix, double **ranges, double *lnl_line_stasis, long **statechars, long *charswstates, int *novels, int maxst, double *alphas, int rates, int UNKNOWN, int INAP);void stasis_likelihood_sighting(int notu, long **chmatrix, double **sightings, int *sights, double *lnl_line_stasis, long **statechars, long *charswstates, int *novels, int maxst, double *alphas, int rates, int UNKNOWN, int INAP);void MkSimpleNode(int HTU, int notu, int desc[], int f1, int foote, double **divergences, long **statechars, long *charswstates, int maxst, double *alphas, double *betas, int rates, double ***statelikes, double lambda, unsigned long *minbr);	#elseextern double ***initialize_conditional_likelihoods(long **chmatrix, int *nstates, int notu, int ttlbr, int nchars, int maxst, int UNKNOWN, int INAP);extern void MkSimplest(int st, int states, double rate, double time, double *marginals, int UNKNOWN, int INAP);extern void MkSimple(double **statelikes, int otu, int anc, int charst, double rate, double time);extern void MkSimpleGeog(double **geoglikes, double *pg, int otu, int anc, int charst, double rate, double origin, double FA);extern void MkModel(double *stls, int states, double rate, double time, double *marginals, int missing, int notap);extern void MkGeogNode(double **lgsp, int *node, double *fa, int htu, int f1, double geog, double im, double t);extern void MkBranch(int sp, int anc, double ***statelikes, double ***nodelnmarg, long **statechars, long *charswstates, int maxst, double rate, double time, int UNKNOWN, int INAP);extern void MkCharacters(int sp, int ancl, int htu, double ***statelikes, double ***nodelnmarg, long **statechars, long *charwstates, int maxst, double rate, double time, int UNKNOWN, int INAP);extern void MkCharactersVar(int sp, int ancl, int htu, double ***statelikes, double ***nodelnmarg, double ***branchlnlikes, long **statechars, long *charwstates, int maxst, double *alphas, int rates, double time, int UNKNOWN, int INAP);extern void MkCharactersVarBranch(int sp, int ancl, double ***statelikes, double ***branchlikes, long **statechars, long *charswstates, int maxst, double *alphas, int rates, double time, int UNKNOWN, int INAP);extern void MkSimpleWholeTree(long *ape, int notu, int nodes, double **divergences, long **statechars, long *charswstates, int maxst, double *alphas, double *betas, int rates, double ***statelikes, double lambda, unsigned long *ancestral, unsigned long *minbr);extern void MkSimplePulley(int HTU, long *ape, int notu, int nodes, double **divergences, long **statechars, long *charswstates, int maxst, double *alphas, double *betas, int rates, double ***statelikes, double lambda, unsigned long *ancestral, unsigned long *minbr);extern double get_tree_likelihood(double **statelikes, int *novels, int *nstates, int nchars);extern void stasis_likelihood_simple(int notu, long **chmatrix, double **ranges, double *lnl_line_stasis, long **statechars, long *charswstates, int *novels, int maxst, double *alphas, int rates, int UNKNOWN, int INAP);extern void stasis_likelihood_sighting(int notu, long **chmatrix, double **sightings, int *sights, double *lnl_line_stasis, long **statechars, long *charswstates, int *novels, int maxst, double *alphas, int rates, int UNKNOWN, int INAP);void MkSimpleNode(int HTU, int notu, int desc[], int f1, int foote, double **divergences, long **statechars, long *charswstates, int maxst, double *alphas, double *betas, int rates, double ***statelikes, double lambda, unsigned long *minbr);#endif