/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//*/*	M. Kosnik's basic print functions as of 1998.11.24/*	mkosnik@uchicago.edu/*/*	This file is copyright (C) 1998 Matthew Kosnik/*/*	This program is free software; you can redistribute it and/or modify it /*	under the terms of version 2 the GNU General Public License as published /*	by the Free Software Foundation./*/*	This program is distributed in the hope that it will be useful, but WITHOUT/*	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or /*	FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for /*	more details./*/*	To view a copy of the license go to:/*	http://www.fsf.org/copyleft/gpl.html/*	To receive a copy of the GNU General Public License write the Free Software/* 	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA./*/*	Copies of this source code are available without cost from:/*	http://geosci.uchicago.edu/paleo/csource//*	/*	These work for me using Codewarrior 4 on a mac 7600/233/*	/*	Print functions:/*		p_int_matrix prints an int rectangular matrix to the screen/*		p_float_matrix prints a float rectangular matrix to the screen /*		p_double_matrix prints a double rectangular matrix to the screen /*			to call any of these (nothing is returned):/*				p_double_matrix(matrix, columns, rows);	/*		/*		fp_int_matrix prints an int rectangular matrix to a file/*		fp_float_matrix prints a float rectangular matrix to a file  /*		fp_double_matrix prints a double rectangular matrix to a file /*			to call any of these (nothing is returned):/*				fp_double_matrix(matrix, columns, rows, filename);	/*	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */#ifdef print_matrix	#include <stdlib.h>	#include <stdio.h>	#include <string.h>	void p_int_matrix(int **, int, int);	void p_ulong_matrix(unsigned long **, int, int);	void p_float_matrix(float **, int, int);	void p_double_matrix(double **, int, int);	void fp_int_matrix(int **, int, int, struct _FILE *);	void fp_ulong_matrix(unsigned long **, int, int, struct _FILE *);	void fp_float_matrix(float **, int, int, struct _FILE *);	void fp_double_matrix(double **, int, int, struct _FILE *);	void fp_ul_matrix1(unsigned long **, int, int, char *);	void fp_ul_matrix2(unsigned long **, unsigned long *, unsigned long *, unsigned long *, unsigned long *, int, int, char *);	void f_significance_report(float *, float **, int, int, unsigned long *, char *);	void sf_significance_report(float *, float **, int, int, unsigned long *);#else	extern void p_int_matrix(int **, int, int);	extern void p_ulong_matrix(unsigned long **, int, int);	extern void p_float_matrix(float **, int, int);	extern void p_double_matrix(double **, int, int);	extern void fp_int_matrix(int **, int, int, struct _FILE *);	extern void fp_ulong_matrix(unsigned long **, int, int, struct _FILE *);	extern void fp_float_matrix(float **, int, int, struct _FILE *);	extern void fp_double_matrix(double **, int, int, struct _FILE *);	extern void fp_ul_matrix1(unsigned long **, int, int, char *);	extern void fp_ul_matrix2(unsigned long **, unsigned long *, unsigned long *, unsigned long *, unsigned long *, int, int, char *);	extern void f_significance_report(float *, float **, int, int, unsigned long *, char *);	extern void sf_significance_report(float *, float **, int, int, unsigned long *);#endif