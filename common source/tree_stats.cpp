#include "tree_stats.h"float ConsensusForkIndex(NODE * const tree1, NODE * const tree2, int *ntaxa) {	float CFI;	bool **cube1, **cube2;	int i, j, k;	int correct_nodes;	bool different;	NODE *root1=0, *root2=0;		cube1=bmatrix(2**ntaxa, *ntaxa+1);	cube2=bmatrix(2**ntaxa, *ntaxa+1);	AddTreeToCube(tree1, cube1, ntaxa);	AddTreeToCube(tree2, cube2, ntaxa);	root1=GetRoot(tree1, ntaxa);	root2=GetRoot(tree2, ntaxa);	CFI=0.0;	correct_nodes=0;	for (i=*ntaxa+1;i<2**ntaxa;++i) {		// for all nodes of tree1		if (root1->label!=i) {			for (j=*ntaxa+1;j<2**ntaxa;++j) {	// for all nodes of tree2				if (root2->label!=j) {					different=false;				// begin assuming these nodes are different					for (k=1;k<=*ntaxa;++k) if (cube1[i][k]!=cube2[j][k]) different=true;	// check 'status' of all terminal taxa for differences					if (!different) {				// if all taxa are the same						++correct_nodes;			// this node matches						break;						// stop checking tree2, and move to the next node on tree1									}				}			}		}	}						CFI=(float)correct_nodes/((float)*ntaxa-2);			free_matrix(cube1, 2**ntaxa);	free_matrix(cube2, 2**ntaxa);	return CFI;}float CollessTreeBalance(NODE *tree, int *ntaxa) {	NODE *root;	int *clade_richness;	int i;//	int gobots;	float I;		clade_richness=new int [2**ntaxa];	for (i=1;i<=*ntaxa;++i) clade_richness[i]=1;	root=GetRoot(tree, ntaxa);	I=0;	CladeRichnessMachine(root, clade_richness, I);	I=I/(((*ntaxa-1)*(*ntaxa-2))/2);	//	PrintTree(tree, ntaxa);//	for (i=1;i<2**ntaxa;++i) printf ("Node %d\t%d\n", i, clade_richness[i]);//	printf ("I = %.2f\n", I);//	scanf ("%d", &gobots);	delete [] clade_richness;		return I;}void CladeRichnessMachine(NODE *node, int *clade_richness, float &I){		NODE *left_desc, *right_desc;		left_desc=node->left;	right_desc=node->right;		if (!left_desc->tip) CladeRichnessMachine(left_desc, clade_richness, I);	if (!right_desc->tip) CladeRichnessMachine(right_desc, clade_richness, I);	clade_richness[node->label]=clade_richness[left_desc->label]+clade_richness[right_desc->label];	I+=abs(clade_richness[left_desc->label]-clade_richness[right_desc->label]);//	printf ("I = %.2f\n", I);}