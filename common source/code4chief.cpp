#include "code4chief.h"#include "tree_fns.h"void matrixToData(long **matrix, DATA *data) {	for (int i=0;i<*data->GetNTaxa();i++) {		for (int j=0;j<*data->GetNChrs();j++) {			if (matrix[i][j]!=-11 && matrix[i][j]!=-22) data->SetMatrix(i+1,j+1, pow(2,matrix[i][j]));		}	}}void typesToData(int *types, DATA *data){	for (int j=0;j<*data->GetNChrs();j++) { 		if (types[j]==0) data->SetChrType(j+1,1);		else if (types[j]==1) data->SetChrType(j+1,0);	}}void treeToMatrix(NODE *tree, long **tree_matrix, int ntaxa) {	NODE *root;	root=GetRoot(tree, &ntaxa);	treeToMatrixMachine(root,tree_matrix,ntaxa);}void treeToMatrixMachine(NODE *this_node, long  **tree_matrix, int ntaxa) {	NODE *l, *r;		l=this_node->left;	r=this_node->right;	tree_matrix[(this_node->label-ntaxa)-1][0]=2;	tree_matrix[(this_node->label-ntaxa)-1][1]=l->label-1;	tree_matrix[(this_node->label-ntaxa)-1][2]=r->label-1;	if (!l->tip) treeToMatrixMachine(l, tree_matrix, ntaxa);	if (!r->tip) treeToMatrixMachine(r, tree_matrix, ntaxa);}void matrixToTree(long **tree_matrix, NODE *tree, int ntaxa) {	for (int i=0;i<ntaxa-1;i++) {		tree[ntaxa+i+1].left=&tree[tree_matrix[i][1]+1];		tree[ntaxa+i+1].right=&tree[tree_matrix[i][2]+1];	}	GetAncs(&tree[ntaxa+1]);	PrintTree(tree, &ntaxa);}