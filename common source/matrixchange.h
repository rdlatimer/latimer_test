/* routines to alter vectors and matrices in simple ways, such as extracting	numbers or reseting vectors/matrices to a particular value (e.g., 0).		Also includes routines to set two matrices equal to one another		Written by P.J. Wagner 05/25/02		updated 2005.02.12		updated 2005.04.30		updated 2010.12.13****************************************************************************/#ifdef matrixchange 	#include <stdlib.h>	#include <stdio.h>	#include <time.h>	#include <math.h>	#include <string.h>	void remove_int(int *i, int j, int N);	void equalivector(int *i, int *j, int N);	void equallvector(long *v1, long *v2, int N);	void equalulvector(unsigned long *v1, unsigned long *v2, int N);	void equaldvector(double *i, double *j, int N);	void equalimatrix(int **mat1, int **mat2, int R, int C);	void equaldmatrix(double **mat1, double **mat2, int R, int C);	void equallmatrix(long **mat1, long **mat2, int R, int C);	void equaldcube(double ***cube1, double ***cube2, int T, int R, int C);	void clearivector(int *i, int n, int k);	void clearlvector(long *i, int n, long k);	void clearulvector(unsigned long *i, int n, long k);	void cleardvector(double *i, int n, double k);	void clearimatrix(int **i, int m, int n, int k);	void clearlmatrix(long **i, int m, int n, int k);	void clearulmatrix(unsigned long **i, int m, int n, int k);	void cleardmatrix(double **i, int m, int n, double k);	void cleardcube(double ***i, int m, int n, int p, int k);	long **transposelong(long **mat, int R, int C);	int **transposeint(int **mat, int R, int C);	float **transposefloat(float **mat, int R, int C);	double **transposedbl(double **mat, int R, int C);	char **transposechar(char **mat, int R, int C);	unsigned long **transposeunlng(unsigned long **mat, int R, int C);	long **rescaleclmatrixmin(long **mat, int notu, int nchars, int UNKNOWN, int INAP, int M);	int *scrambleiarray(int *i, int n);	long *scramblelarray(long *i, int n);	double *scrambledarray(double *i, int n);	unsigned long *scrambleularray(unsigned long *i, int n);	void scrambleiarraycommand(int *i, int n);	void scrambledarraycommand(double *i, int n);	void scrambleularraycommand(unsigned long *i, int n);	void removefromivector(int *i, int j, int *k);	void removefromulvector(unsigned long *i, unsigned long j, int *k);	void cleancladisticmatrix(long **matrix, int notu, int nchars, int UNKNOWN, int INAP);	void vectorequallongmatrixcol(long **matrix, long *vector, int ccol, int rows);	void rescaledvector(double *v, int n, double k);	void proportionaldvector(double *orig, double *scaled, double rescale, int length);	long **reducecladisticmatrix(long **origmatrix, int notu, int nchars);	long **eliminateuniformativefromcladisticmatrix(long **origmatrix, int *autaps, int *nstates, int notu, int nchar);#else	extern void remove_int(int *i, int j, int N);	extern void equalivector(int *i, int *j, int N);	extern void equallvector(long *v1, long *v2, int N);	extern void equalulvector(unsigned long *v1, unsigned long *v2, int N);	extern void equaldvector(double *i, double *j, int N);	extern void equalimatrix(int **mat1, int **mat2, int R, int C);	extern void equaldmatrix(double **mat1, double **mat2, int R, int C);	extern void equallmatrix(long **mat1, long **mat2, int R, int C);	extern void equaldcube(double ***cube1, double ***cube2, int T, int R, int C);	extern void clearivector(int *i, int n, int k);	extern void clearlvector(long *i, int n, long k);	extern void clearulvector(unsigned long *i, int n, long k);	extern void cleardvector(double *i, int n, double k);	extern void clearimatrix(int **i, int m, int n, int k);	extern void clearlmatrix(long **i, int m, int n, int k);	extern void clearulmatrix(unsigned long **i, int m, int n, int k);	extern void cleardmatrix(double **i, int m, int n, double k);	extern void cleardcube(double ***i, int m, int n, int p, int k);	extern long **transposelong(long **mat, int R, int C);	extern int **transposeint(int **mat, int R, int C);	extern float **transposefloat(float **mat, int R, int C);	extern double **transposedbl(double **mat, int R, int C);	extern char **transposechar(char **mat, int R, int C);	extern unsigned long **transposeunlng(unsigned long **mat, int R, int C);	extern long **rescaleclmatrixmin(long **mat, int notu, int nchars, int UNKNOWN, int INAP, int M);	extern int *scrambleiarray(int *i, int n);	extern long *scramblelarray(long *i, int n);	extern double *scrambledarray(double *i, int n);	extern unsigned long *scrambleularray(unsigned long *i, int n);	extern void scrambleiarraycommand(int *i, int n);	extern void scrambledarraycommand(double *i, int n);	extern void scrambleularraycommand(unsigned long *i, int n);	extern void removefromivector(int *i, int j, int *k);	extern void removefromulvector(unsigned long *i, unsigned long j, int *k);	extern void cleancladisticmatrix(long **matrix, int notu, int nchars, int UNKNOWN, int INAP);	extern void vectorequallongmatrixcol(long **matrix, long *vector, int ccol, int rows);	extern void rescaledvector(double *v, int n, double k);	extern void proportionaldvector(double *orig, double *scaled, double rescale, int length);	extern long **reducecladisticmatrix(long **origmatrix, int notu, int nchars);	extern long **eliminateuniformativefromcladisticmatrix(long **origmatrix, int *autaps, int *nstates, int notu, int nchar);#endif