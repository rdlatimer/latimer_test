/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//*/*	Peter Wagner: pwagner@fmnh.org/*/*	This file is copyright (C) 1998-2005 Peter Wagner/*/*	This program is free software; you can redistribute it and/or modify it /*	under the terms of version 2 the GNU General Public License as published /*	by the Free Software Foundation./*/*	This program is distributed in the hope that it will be useful, but WITHOUT/*	ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or /*	FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for /*	more details./*/*	To view a copy of the license go to:/*	http://www.fsf.org/copyleft/gpl.html/*	To receive a copy of the GNU General Public License write the Free Software/* 	Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA./*/*	Copies of this source code are available without cost from:/*	http://geosci.uchicago.edu/paleo/csource//*	/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *//***********************************************************************v0.0 	1999.03.04 BY P.J. WAGNER III		CODE WRITTEN - CODEWARRIOR 6.1 / MacOS 9.04v0.1	2001.07.11 BY P.J. WAGNER III		FUNCTIONS TRANSFERRED TO SEPARATE FILE		COMMENTS ADDEDv0.2	2005.01.22 P.J. WAGNER III		ADDED i_finite and i_finite_ebar*********************************************************************************************/#ifdef PowerFunctions	#include <stdlib.h>	#include <stdio.h>	#include <math.h>	double* iLinear(int **data, int branches);	double* iFinite(int **data, int branches);	double* i_finite(int **data, int branches);	double** i_finite_ebar(int **data, int st, int BR, int MLC, double bestS, double ebar);	double* iPower(int **data, int branches);	double* dLinear(double **data, int branches);	double* dFinite(double **data, int branches);	double* dPower(double **data, int branches);	double LnPoisson(int obs, double rate, double N);	double factorial (int number);	double HurlbertSimple(int n, int S);	double PowerFunction(int n, double coeff, double exp);#else	extern double* iLinear(int **data, int branches);	extern double* iFinite(int **data, int branches);	extern double* i_finite(int **data, int branches);	extern double** i_finite_ebar(int **data, int st, int BR, int MLC, double bestS, double ebar);	extern double* iPower(int **data, int branches);	extern double* dLinear(double **data, int branches);	extern double* dFinite(double **data, int branches);	extern double* dPower(double **data, int branches);	extern double LnPoisson(int obs, double rate, double N);	extern double factorial (int number);	extern double HurlbertSimple(int n, int S);	extern double PowerFunction(int n, double coeff, double exp);	#endif